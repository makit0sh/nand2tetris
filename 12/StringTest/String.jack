// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int mLength;
    field Array s;
    field int size;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let maxLength=1;
        }
        if (maxLength<0) { do Sys.error(14); }
        let mLength = maxLength;
        let s = Array.new(maxLength);
        let size = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do s.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return size;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if ( (j<0) | (j>size) ) { do Sys.error(15); }
        return s[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if ( (j<0) | (j>size) ) { do Sys.error(16); }
        let s[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (~(size<mLength)) { do Sys.error(17); }
        let s[size] = c;
        let size = size+1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (size=0) { do Sys.error(18); }
        let size = size-1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int int_val;
        var int i;
        var boolean neg;

        let int_val = 0;

        if( (size > 0) & (s[0] = 45) ) {      // '-'
            let neg = true;
            let i = 1;
        }
        else {
            let neg = false;
            let i = 0;
        }

        while( (i < size) & String.is_digit(s[i]) ) {
            let int_val = (int_val * 10) + String.digit_val(s[i]);
            let i = i + 1;
        }

        if( neg ) {
            return -int_val;
        }
        else {
            return int_val;
        }
    }

    /** Returns whether the given char is a digit or not */
    function boolean is_digit(char c) {
        return ~(c < 48) & ~(c > 57);
    }
        
    /** Returns the integer value of the given digit character */
    function int digit_val(char c) {
        return c - 48;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int number) {
        let size = 0;    // Clear string
        
        if( number < 0 ) {
            let number = -number;
            do appendChar(45);      // leading '-'
        }
        
        do do_set_int(number);
        return;
    }

    method void do_set_int(int number) {
        var int q;
        var int mod;
        var char c;
        
        let q = number / 10;
        let mod = number - (q*10);
        let c = String.digit_char(mod);
        
        if( number < 10 ) {
            if (~(size<mLength)) { do Sys.error(19); }
            do appendChar(c);
        }
        else {
            do do_set_int(q);
            if (~(size<mLength)) { do Sys.error(19); }
            do appendChar(c);
        }
        return;
    }
    
    function char digit_char(int i) {
        return i + 48;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
